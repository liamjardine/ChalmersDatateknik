-------------- Demosession 2.

-- 4.1

-- a.

What are the values of control signals generated by the control
for the instruction AND Rd, Rs, Rt?

Answer:

Reg[Rd] = Reg[Rs] AND Reg[Rt]

	ALUSrc = 0
	ALUoperation = AND
	Branch = 0

	RegDst = 1
	RegWrite = 1

	MemRead = 0
	MemWrite = 0

-- 4.9(11)

Find dependencies and add NOPs to eliminate hazards,
also try one where full and ALU-ALU (only from EX to EX) forwarding is assumed:

OR r1,r2,r3
OR r2,r1,r4
OR r1,r1,r2

Answer:

r1 ->	Read-After-Write on r1 from I1 to I2
	Read-After-Write on r1 from I1 to I3
	Write-After-Read on r1 from I2 to I3
	Write-After-Read on r1 from I1 to I3

r2 ->	Read-After-Write on r2 from I2 to I3
	Write-After-Read on r2 from I1 to I2

Cycle:		|1	2	3	4	5	6	7	8	9	10	11
----------------|---------------------------------------------------------------------------------------
OR r1,r2,r3	|IF	ID	EX	MEM	WB							|
NOP		|	IF	ID	EX	MEM	WB						|
NOP		|		IF	ID	EX	MEM	WB					|
OR r2,r1,r4	|			IF	ID	EX	MEM	WB				|
NOP		|				IF	ID	EX	MEM	WB			|
NOP		|					IF	ID	EX	MEM	WB		|
OR r1,r1,r2	|						IF	ID	EX	MEM	WB	|
---------------------------------------------------------------------------------------------------------

Exe. Time: (7+4)*t

With full forwarding r1 is sent directly from I1 to I2 (EX -> EX),
and r2 is sent directly from I2 to I3 (EX -> EX).

Cycle:		|1	2	3	4	5	6	7
----------------|--------------------------------------------------------
OR r1,r2,r3	|IF	ID	EX	MEM	WB			|
OR r2,r1,r4	|	IF	ID	EX	MEM	WB		|
OR r1,r1,r2	|		IF	ID	EX	MEM	WB	|
-------------------------------------------------------------------------

Exe. Time: (3+4)*t

With full forwarding r1 is sent directly from I1 to I2 (EX -> EX),
and r2 is sent directly from I2 to I3 (EX -> EX).

Cycle:		|1	2	3	4	5	6	7
----------------|--------------------------------------------------------
OR r1,r2,r3	|IF	ID	EX	MEM	WB			|
OR r2,r1,r4	|	IF	ID	EX	MEM	WB		|
OR r1,r1,r2	|		IF	ID	EX	MEM	WB	|
-------------------------------------------------------------------------

Exe. Time: (3+4)*t, however since it's slightly less complex it should take less time.

Summery:

- ALU-ALU Forwarding is only from EX to EX.
- Bubbles are added, by the hardware, inbetween cycles to avoid hazards.
  Under a bubble there should be a bubble. For a load we need to add bubbles
  until after the MEM stage if we have two consectutive instructions with
  the same register. Assuming there is full forwarding.
- The hazard detection logic must detect situations when the branch depends on
	1. The previous R-type instruction.
	2. The previous load instruction.
	3. The penultimate (second-previous) load instruction.





